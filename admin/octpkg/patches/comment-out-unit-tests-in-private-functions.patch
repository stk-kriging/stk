--- a/sampling/private/halfpintl.m
+++ b/sampling/private/halfpintl.m
@@ -121,74 +121,74 @@
 end % function
 
 
-%!test  % case #1
-%! a = 1;
-%! b = 1;
-%! [a_out, b_out, z_out] = halfpintl (a, b);
-%! assert (a_out == 1)
-%! assert (b_out == 1)
-%! assert (isempty (z_out))
-
-%!test  % case #2: two lines, slopes not equal, already sorted
-%! a = [1; -1];
-%! b = [0; 2];
-%! [a_out, b_out, z_out] = halfpintl (a, b);
-%! assert (isequal (a_out, [1; -1]))
-%! assert (isequal (b_out, [0; 2]))
-%! assert (z_out == 1)
-
-%!test  % case #3: same as #2, but not sorted
-%! a = [-1; 1];
-%! b = [ 2; 0];
-%! [a_out, b_out, z_out] = halfpintl (a, b);
-%! assert (isequal (a_out, [1; -1]))
-%! assert (isequal (b_out, [0; 2]))
-%! assert (z_out == 1)
-
-%!test  % case #4: two lines, equal slopes, already sorted
-%! a = [0; 0];
-%! b = [1; 2];
-%! [a_out, b_out, z_out] = halfpintl (a, b);
-%! assert (a_out == 0)
-%! assert (b_out == 1)
-%! assert (isempty (z_out))
-
-%!test  % case #5: same as #4, but not sorted
-%! a = [0; 0];
-%! b = [2; 1];
-%! [a_out, b_out, z_out] = halfpintl (a, b);
-%! assert (a_out == 0)
-%! assert (b_out == 1)
-%! assert (isempty (z_out))
-
-%!test  % case #6: add a dominated line to #2 (the result does not change)
-%! a = [1; -1; 0];
-%! b = [0;  2; 1];
-%! [a_out, b_out, z_out] = halfpintl (a, b);
-%! assert (isequal (a_out, [1; -1]))
-%! assert (isequal (b_out, [0; 2]))
-%! assert (z_out == 1)
-
-%!test  % case #7: permutation of #6
-%! a = [1; 0; -1];
-%! b = [0; 1;  2];
-%! [a_out, b_out, z_out] = halfpintl (a, b);
-%! assert (isequal (a_out, [1; -1]))
-%! assert (isequal (b_out, [0; 2]))
-%! assert (z_out == 1)
-
-%!test  % case #8: another permutation of #6
-%! a = [0; 1; -1];
-%! b = [1; 0;  2];
-%! [a_out, b_out, z_out] = halfpintl (a, b);
-%! assert (isequal (a_out, [1; -1]))
-%! assert (isequal (b_out, [0; 2]))
-%! assert (z_out == 1)
-
-%!test  % case #9: same as #8, with some duplicated lines added
-%! a = [0; 1; 0; -1; 0; -1; 1];
-%! b = [1; 0; 1;  2; 1;  2; 0];
-%! [a_out, b_out, z_out] = halfpintl (a, b);
-%! assert (isequal (a_out, [1; -1]))
-%! assert (isequal (b_out, [0; 2]))
-%! assert (z_out == 1)
+% %!test  % case #1
+% %! a = 1;
+% %! b = 1;
+% %! [a_out, b_out, z_out] = halfpintl (a, b);
+% %! assert (a_out == 1)
+% %! assert (b_out == 1)
+% %! assert (isempty (z_out))
+%
+% %!test  % case #2: two lines, slopes not equal, already sorted
+% %! a = [1; -1];
+% %! b = [0; 2];
+% %! [a_out, b_out, z_out] = halfpintl (a, b);
+% %! assert (isequal (a_out, [1; -1]))
+% %! assert (isequal (b_out, [0; 2]))
+% %! assert (z_out == 1)
+%
+% %!test  % case #3: same as #2, but not sorted
+% %! a = [-1; 1];
+% %! b = [ 2; 0];
+% %! [a_out, b_out, z_out] = halfpintl (a, b);
+% %! assert (isequal (a_out, [1; -1]))
+% %! assert (isequal (b_out, [0; 2]))
+% %! assert (z_out == 1)
+%
+% %!test  % case #4: two lines, equal slopes, already sorted
+% %! a = [0; 0];
+% %! b = [1; 2];
+% %! [a_out, b_out, z_out] = halfpintl (a, b);
+% %! assert (a_out == 0)
+% %! assert (b_out == 1)
+% %! assert (isempty (z_out))
+%
+% %!test  % case #5: same as #4, but not sorted
+% %! a = [0; 0];
+% %! b = [2; 1];
+% %! [a_out, b_out, z_out] = halfpintl (a, b);
+% %! assert (a_out == 0)
+% %! assert (b_out == 1)
+% %! assert (isempty (z_out))
+%
+% %!test  % case #6: add a dominated line to #2 (the result does not change)
+% %! a = [1; -1; 0];
+% %! b = [0;  2; 1];
+% %! [a_out, b_out, z_out] = halfpintl (a, b);
+% %! assert (isequal (a_out, [1; -1]))
+% %! assert (isequal (b_out, [0; 2]))
+% %! assert (z_out == 1)
+%
+% %!test  % case #7: permutation of #6
+% %! a = [1; 0; -1];
+% %! b = [0; 1;  2];
+% %! [a_out, b_out, z_out] = halfpintl (a, b);
+% %! assert (isequal (a_out, [1; -1]))
+% %! assert (isequal (b_out, [0; 2]))
+% %! assert (z_out == 1)
+%
+% %!test  % case #8: another permutation of #6
+% %! a = [0; 1; -1];
+% %! b = [1; 0;  2];
+% %! [a_out, b_out, z_out] = halfpintl (a, b);
+% %! assert (isequal (a_out, [1; -1]))
+% %! assert (isequal (b_out, [0; 2]))
+% %! assert (z_out == 1)
+%
+% %!test  % case #9: same as #8, with some duplicated lines added
+% %! a = [0; 1; 0; -1; 0; -1; 1];
+% %! b = [1; 0; 1;  2; 1;  2; 0];
+% %! [a_out, b_out, z_out] = halfpintl (a, b);
+% %! assert (isequal (a_out, [1; -1]))
+% %! assert (isequal (b_out, [0; 2]))
+% %! assert (z_out == 1)
